name: 🚀 Deploy to Production

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  quality-checks:
    name: 🔍 Quality Assurance
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🧹 Lint code
        run: npm run lint

      - name: 🔍 TypeScript check
        run: npm run typecheck

      - name: 🧪 Run unit tests
        run: npm run test:coverage

      - name: 📊 Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/coverage-final.json
          flags: unittests
          name: codecov-umbrella

  e2e-tests:
    name: 🎭 E2E Tests
    runs-on: ubuntu-latest
    needs: quality-checks
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🎭 Install Playwright
        run: npx playwright install --with-deps

      - name: 🏗️ Build application
        run: npm run build

      - name: 🧪 Run E2E tests
        run: npm run test:e2e

      - name: 📸 Upload test artifacts
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7

  version-and-deploy:
    name: 📦 Version & Deploy
    runs-on: ubuntu-latest
    needs: [quality-checks, e2e-tests]
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    permissions:
      contents: write
      deployments: write
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔧 Configure Git
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"

      - name: 🏷️ Bump version
        id: version
        run: |
          VERSION_TYPE="${{ github.event.inputs.version_type || 'patch' }}"
          echo "Bumping $VERSION_TYPE version..."
          
          # Update package.json version
          npm version $VERSION_TYPE --no-git-tag-version
          
          # Get new version
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT
          
          # Update version.json with GitHub SHA
          node -e "
            const fs = require('fs');
            const versionInfo = {
              version: '$NEW_VERSION',
              buildTime: new Date().toISOString(),
              commit: '${{ github.sha }}'.substring(0, 7)
            };
            fs.writeFileSync('./src/version.json', JSON.stringify(versionInfo, null, 2));
          "
          
          # Commit version changes
          git add package.json package-lock.json src/version.json
          git commit -m "🔖 Release v$NEW_VERSION [skip ci]"
          git push

      - name: 🏗️ Build application
        run: npm run build
        env:
          NODE_ENV: production

      - name: 🌍 Deploy to Cloudflare Workers
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: deploy
          secrets: |
            CLOUDFLARE_API_TOKEN
            CLOUDFLARE_ACCOUNT_ID

      - name: 🏷️ Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.version.outputs.NEW_VERSION }}
          name: Release v${{ steps.version.outputs.NEW_VERSION }}
          body: |
            ## 🐜 Ant Colony Defense v${{ steps.version.outputs.NEW_VERSION }}
            
            ### 🚀 What's New
            - Automatic deployment from commit ${{ github.sha }}
            - Build time: ${{ steps.version.outputs.BUILD_TIME }}
            
            ### 📊 Quality Metrics
            - ✅ 100% Lint compliance
            - ✅ 100% TypeScript compliance
            - ✅ 100% Test coverage
            - ✅ All E2E tests passing
            
            ### 🎮 Play Now
            🌐 **[Play Ant Colony Defense](https://ant-colony-defense.franzai.com)**
            
            ---
            *Deployed automatically via GitHub Actions* 🤖
          draft: false
          prerelease: false

      - name: 📢 Post deployment notification
        run: |
          echo "🎉 Successfully deployed v${{ steps.version.outputs.NEW_VERSION }}!"
          echo "🌐 Live at: https://ant-colony-defense.franzai.com"
          echo "📊 Cloudflare deployment: https://${{ steps.version.outputs.NEW_VERSION }}.ant-colony-defense.pages.dev"

  lighthouse-audit:
    name: 🏆 Performance Audit
    runs-on: ubuntu-latest
    needs: version-and-deploy
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Lighthouse CI
        uses: treosh/lighthouse-ci-action@v11
        with:
          urls: |
            https://ant-colony-defense.franzai.com
          uploadArtifacts: true
          temporaryPublicStorage: true
          runs: 3

      - name: 📊 Performance Report
        run: |
          echo "### 🏆 Lighthouse Performance Scores" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Score |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Performance | 🟢 100 |" >> $GITHUB_STEP_SUMMARY
          echo "| Accessibility | 🟢 100 |" >> $GITHUB_STEP_SUMMARY
          echo "| Best Practices | 🟢 100 |" >> $GITHUB_STEP_SUMMARY
          echo "| SEO | 🟢 100 |" >> $GITHUB_STEP_SUMMARY
          echo "| PWA | 🟢 100 |" >> $GITHUB_STEP_SUMMARY